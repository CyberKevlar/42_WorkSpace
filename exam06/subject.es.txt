Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset
--------------------------------------------------------------------------------

Write a program that will listen for client to connect on a certain port on 127.0.0.1 and will let clients to speak with each other

This program will take as first argument the port to bind to
If no argument is given, it should write in stderr "Wrong number of arguments" followed by a \n and exit with status 1
If a System Calls returns an error before the program start accepting connection, it should write in stderr "Fatal error" followed by a \n and exit with status 1
If you cant allocate memory it should write in stderr "Fatal error" followed by a \n and exit with status 1

Your program must be non-blocking but client can be lazy and if they don't read your message you must NOT disconnect them...

Your program must not contains #define preproc
Your program must only listen to 127.0.0.1
The fd that you will receive will already be set to make 'recv' or 'send' to block if select hasn't be called before calling them, but will not block otherwise.

When a client connect to the server:
- the client will be given an id. the first client will receive the id 0 and each new client will received the last client id + 1
- %d will be replace by this number
- a message is sent to all the client that was connected to the server: "server: client %d just arrived\n"

clients must be able to send messages to your program.
- message will only be printable characters, no need to check
- a single message can contains multiple \n
- when the server receive a message, it must resend it to all the other client with "client %d: " before every line!

When a client disconnect from the server:
- a message is sent to all the client that was connected to the server: "server: client %d just left\n"

Memory or fd leaks are forbidden

To help you, you will find the file main.c with the beginning of a server and maybe some useful functions. (Beware this file use forbidden functions or write things that must not be there in your final program)

Warning our tester is expecting that you send the messages as fast as you can. Don't do un-necessary buffer.

Evaluation can be a bit longer than usual...

Hint: you can use nc to test your program
Hint: you should use nc to test your program
Hint: To test you can use fcntl(fd, F_SETFL, O_NONBLOCK) but use select and NEVER check EAGAIN (man 2 send)

--------------------------------------------------------------------------------

Escriba un programa que escuche si el cliente se conecta a un puerto específico en 127.0.0.1 y permita que los clientes se comuniquen entre sí.

Este programa tomará como primer argumento el puerto al que se vinculará.
Si no se proporciona ningún argumento, debe escribir en la salida estándar "Número incorrecto de argumentos" seguido de \n y salir con el estado 1.
Si una llamada al sistema devuelve un error antes de que el programa comience a aceptar la conexión, debe escribir en la salida estándar "Error fatal" seguido de \n y salir con el estado 1.
Si no se puede asignar memoria, debe escribir en la salida estándar "Error fatal" seguido de \n y salir con el estado 1.

Su programa debe ser no bloqueante, pero el cliente puede ser perezoso y, si no lee su mensaje, NO debe desconectarlo.

Su programa no debe contener #define preproc.
Su programa solo debe escuchar la red 127.0.0.1.
El fd que recibirá ya estará configurado para bloquear 'recv' o 'send' si no se ha llamado a select antes de llamarlos, pero no se bloqueará en caso contrario.

Cuando un cliente se conecta al servidor:
- Se le asignará un ID. El primer cliente recibirá el ID 0 y cada nuevo cliente recibirá el ID del último cliente + 1.
- %d se reemplazará por este número.
- Se envía un mensaje a todos los clientes conectados al servidor: "servidor: cliente %d acaba de llegar\n".

Los clientes deben poder enviar mensajes a su programa. - El mensaje solo tendrá caracteres imprimibles, no es necesario comprobarlo.
- Un solo mensaje puede contener varios \n.
- Cuando el servidor recibe un mensaje, debe reenviarlo a todos los demás clientes con "cliente %d:" antes de cada línea.

Cuando un cliente se desconecta del servidor:
- Se envía un mensaje a todos los clientes que estaban conectados al servidor: "servidor: cliente %d acaba de salir\n".

Se prohíben las fugas de memoria o de memoria flash.

Para ayudarte, encontrarás el archivo main.c con el inicio de un servidor y quizás algunas funciones útiles. (Ten cuidado, este archivo utiliza funciones prohibidas o escribe cosas que no deben estar presentes en tu programa final).

Advertencia: nuestro equipo de pruebas espera que envíes los mensajes lo más rápido posible. No uses un búfer innecesario.

La evaluación puede ser un poco más larga de lo habitual...

Sugerencia: puedes usar nc para probar tu programa.
Sugerencia: deberías usar nc para probar tu programa.
Sugerencia: Para probar, puedes usar fcntl(fd, F_SETFL, O_NONBLOCK), pero usa select y NUNCA marques EAGAIN (man 2 send).